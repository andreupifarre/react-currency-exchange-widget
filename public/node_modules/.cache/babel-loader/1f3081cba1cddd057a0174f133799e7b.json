{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect } from 'react';\nimport useInterval from '../../hooks/useInterval';\nimport useFetchData from '../../hooks/useFetchData';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [{\n  code: 'GBP',\n  balance: '10',\n  sign: '£'\n}, {\n  code: 'EUR',\n  balance: '0',\n  sign: '€'\n}, {\n  code: 'USD',\n  balance: '0',\n  sign: '$'\n}];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency); // const rate = useFetchData(fromCurrency, toCurrency, useInterval(10000));\n\n  const rate = useFetchData(fromCurrency, toCurrency, 0); // const rate = useFetchData(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  const [fromRate, setFromRate] = useState(1);\n  const [toRate, setToRate] = useState(rate);\n  const selectedFromCurrency = currencies.find(item => item.code === fromCurrency);\n  const selectedToCurrency = currencies.find(item => item.code === toCurrency);\n\n  const convertFromTo = rate => useCallback(() => {\n    parseFloat((fromAmount * rate).toFixed(2));\n  }, [fromAmount]);\n\n  const convertToFrom = rate => parseFloat((toAmount / rate).toFixed(2));\n\n  const handleSwap = () => {\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n    setFromAmount(toAmount);\n    setToAmount(fromAmount);\n    setFromRate(toRate);\n    setToRate(fromRate);\n  };\n\n  useEffect(() => {\n    if (activeCurrency === selectedFromCurrency.code) {\n      setToRate(rate);\n      setToAmount(convertFromTo(rate));\n    } else if (activeCurrency === selectedToCurrency.code) {\n      setFromRate(rate);\n      setFromAmount(convertToFrom(rate));\n    }\n  }, [rate, activeCurrency, selectedFromCurrency.code, selectedToCurrency.code, convertFromTo, convertToFrom]);\n  useEffect(() => {\n    if (activeCurrency !== selectedFromCurrency.code) return;\n    setToAmount(convertFromTo(rate));\n  }, [fromAmount]);\n  useEffect(() => {\n    if (activeCurrency !== selectedToCurrency.code) return;\n    setFromAmount(convertToFrom(rate));\n  }, [toAmount]); // useEffect(() => {\n  //   setToRate(rate);\n  //   setToAmount(7);\n  // }, [rate]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   // setFromAmount(convertToFrom());\n  //   setToRate(rate);\n  // }, [rate]);\n  // useEffect(() => {\n  //   // console.log(1 / rate);\n  //   // console.log(rate / 1);\n  //   console.log(rate);\n  // }, [rate]);\n  // useEffect(() => {\n  //   console.log('From Rate:' + fromRate);\n  //   // if (activeCurrency !== selectedFromCurrency.code) return;\n  //   const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //   setToAmount(exchange);\n  // }, [fromRate]);\n  // useEffect(() => {\n  //   console.log('To Rate:' + toRate);\n  //   // if (activeCurrency !== selectedToCurrency.code) return;\n  //   const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //   setFromAmount(exchange);\n  // }, [toRate]);\n\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    currencies: currencies,\n    setCurrency: setFromCurrency,\n    setAmount: setFromAmount,\n    setActiveCurrency: setActiveCurrency,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    onClick: handleSwap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, selectedFromCurrency.sign, fromRate, \" = \", selectedToCurrency.sign, toRate), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    currencies: currencies,\n    setCurrency: setToCurrency,\n    setAmount: setToAmount,\n    setActiveCurrency: setActiveCurrency,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"exchanger__submit-button\",\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","useInterval","useFetchData","ExchangerRow","defaultFromCurrency","defaultToCurrency","currencies","code","balance","sign","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","rate","fromAmount","setFromAmount","toAmount","setToAmount","activeCurrency","setActiveCurrency","fromRate","setFromRate","toRate","setToRate","selectedFromCurrency","find","item","selectedToCurrency","convertFromTo","useCallback","parseFloat","toFixed","convertToFrom","handleSwap","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useInterval from '../../hooks/useInterval';\nimport useFetchData from '../../hooks/useFetchData';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [\n  { code: 'GBP', balance: '10', sign: '£' },\n  { code: 'EUR', balance: '0', sign: '€' },\n  { code: 'USD', balance: '0', sign: '$' },\n];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  // const rate = useFetchData(fromCurrency, toCurrency, useInterval(10000));\n  const rate = useFetchData(fromCurrency, toCurrency, 0);\n  // const rate = useFetchData(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  const [fromRate, setFromRate] = useState(1);\n  const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(\n    (item) => item.code === fromCurrency,\n  );\n\n  const selectedToCurrency = currencies.find(\n    (item) => item.code === toCurrency,\n  );\n\n  const convertFromTo = (rate) =>\n    useCallback(() => {\n      parseFloat((fromAmount * rate).toFixed(2));\n    }, [fromAmount]);\n\n  const convertToFrom = (rate) => parseFloat((toAmount / rate).toFixed(2));\n\n  const handleSwap = () => {\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n    setFromAmount(toAmount);\n    setToAmount(fromAmount);\n    setFromRate(toRate);\n    setToRate(fromRate);\n  };\n\n  useEffect(() => {\n    if (activeCurrency === selectedFromCurrency.code) {\n      setToRate(rate);\n      setToAmount(convertFromTo(rate));\n    } else if (activeCurrency === selectedToCurrency.code) {\n      setFromRate(rate);\n      setFromAmount(convertToFrom(rate));\n    }\n  }, [\n    rate,\n    activeCurrency,\n    selectedFromCurrency.code,\n    selectedToCurrency.code,\n    convertFromTo,\n    convertToFrom,\n  ]);\n\n  useEffect(() => {\n    if (activeCurrency !== selectedFromCurrency.code) return;\n    setToAmount(convertFromTo(rate));\n  }, [fromAmount]);\n\n  useEffect(() => {\n    if (activeCurrency !== selectedToCurrency.code) return;\n    setFromAmount(convertToFrom(rate));\n  }, [toAmount]);\n\n  // useEffect(() => {\n  //   setToRate(rate);\n  //   setToAmount(7);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   // setFromAmount(convertToFrom());\n  //   setToRate(rate);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   // console.log(1 / rate);\n  //   // console.log(rate / 1);\n  //   console.log(rate);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   console.log('From Rate:' + fromRate);\n  //   // if (activeCurrency !== selectedFromCurrency.code) return;\n  //   const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //   setToAmount(exchange);\n  // }, [fromRate]);\n\n  // useEffect(() => {\n  //   console.log('To Rate:' + toRate);\n  //   // if (activeCurrency !== selectedToCurrency.code) return;\n  //   const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //   setFromAmount(exchange);\n  // }, [toRate]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          currencies={currencies}\n          setCurrency={setFromCurrency}\n          setAmount={setFromAmount}\n          setActiveCurrency={setActiveCurrency}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button\n            className=\"exchanger__button exchanger__button--swap\"\n            onClick={handleSwap}\n          />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {fromRate} = {selectedToCurrency.sign}\n            {toRate}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          currencies={currencies}\n          setCurrency={setToCurrency}\n          setAmount={setToAmount}\n          setActiveCurrency={setActiveCurrency}\n        />\n      </div>\n      <button className=\"exchanger__submit-button\" type=\"button\">\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}