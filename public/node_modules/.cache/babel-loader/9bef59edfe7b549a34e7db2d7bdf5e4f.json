{"ast":null,"code":"const useBalances = () => {\n  const fetch = () => [{\n    code: 'GBP',\n    balance: '10',\n    sign: '£'\n  }, {\n    code: 'EUR',\n    balance: '0',\n    sign: '€'\n  }, {\n    code: 'USD',\n    balance: '0',\n    sign: '$'\n  }];\n\n  const convertFromTo = (amount, rate) => {\n    const conversion = ((amount || 0) * rate).toFixed(2); // eslint-disable-next-line\n\n    return conversion == 0 ? '' : conversion;\n  };\n\n  const convertToFrom = (amount, rate) => {\n    const conversion = ((amount || 0) / rate).toFixed(2); // eslint-disable-next-line\n\n    return conversion != 0 ? '' : conversion;\n  };\n\n  const calculate = (amount, balance, sign) => {\n    const floatAmount = parseFloat(amount);\n    const fee = (floatAmount * EXCHANGE_FEE).toFixed(2);\n    const isAmountExceeding = floatAmount > parseFloat(balance);\n    const isMinAmountReached = !amount || floatAmount >= MIMIMUM_AMOUNT;\n    const isFeeInvolved = floatAmount > ALLOWANCE_LIMIT;\n    const isAllowedToExchange = isAmountExceeding || !isMinAmountReached || !amount;\n    const feeInfo = `Fee: ${sign}${fee}`;\n    const exceedInfo = 'exceeds balance';\n    const minInfo = `minimum amount is ${sign}${MIMIMUM_AMOUNT.toFixed(2)}`;\n    const toInfo = isFeeInvolved ? feeInfo : '';\n    const fromInfo = !isMinAmountReached ? minInfo : isAmountExceeding ? exceedInfo : '';\n    return {\n      isAllowedToExchange,\n      fromInfo,\n      toInfo\n    };\n  };\n\n  const exchange = (balances, fromCurrency, toCurrency, fromAmount, toAmount) => {\n    const newBalances = balances.map(item => {\n      if (item.code === fromCurrency) {\n        const newBalance = parseFloat(item.balance) - parseFloat(fromAmount);\n        return { ...item,\n          balance: newBalance.toFixed(2)\n        };\n      } else if (item.code === toCurrency) {\n        const newBalance = parseFloat(item.balance) + parseFloat(toAmount);\n        return { ...item,\n          balance: newBalance.toFixed(2)\n        };\n      } else {\n        return item;\n      }\n    });\n    return newBalances;\n  };\n\n  return {\n    convertFromTo,\n    convertToFrom,\n    calculate,\n    exchange,\n    fetch\n  };\n};\n\nexport default useBalances;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/hooks/useBalances.js"],"names":["useBalances","fetch","code","balance","sign","convertFromTo","amount","rate","conversion","toFixed","convertToFrom","calculate","floatAmount","parseFloat","fee","EXCHANGE_FEE","isAmountExceeding","isMinAmountReached","MIMIMUM_AMOUNT","isFeeInvolved","ALLOWANCE_LIMIT","isAllowedToExchange","feeInfo","exceedInfo","minInfo","toInfo","fromInfo","exchange","balances","fromCurrency","toCurrency","fromAmount","toAmount","newBalances","map","item","newBalance"],"mappings":"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","sourcesContent":["const useBalances = () => {\n  const fetch = () => [\n    { code: 'GBP', balance: '10', sign: '£' },\n    { code: 'EUR', balance: '0', sign: '€' },\n    { code: 'USD', balance: '0', sign: '$' },\n  ];\n\n  const convertFromTo = (amount, rate) => {\n    const conversion = ((amount || 0) * rate).toFixed(2);\n    // eslint-disable-next-line\n    return conversion == 0 ? '' : conversion;\n  };\n\n  const convertToFrom = (amount, rate) => {\n    const conversion = ((amount || 0) / rate).toFixed(2);\n    // eslint-disable-next-line\n    return conversion != 0 ? '' : conversion;\n  };\n\n  const calculate = (amount, balance, sign) => {\n    const floatAmount = parseFloat(amount);\n    const fee = (floatAmount * EXCHANGE_FEE).toFixed(2);\n    const isAmountExceeding = floatAmount > parseFloat(balance);\n    const isMinAmountReached = !amount || floatAmount >= MIMIMUM_AMOUNT;\n    const isFeeInvolved = floatAmount > ALLOWANCE_LIMIT;\n    const isAllowedToExchange =\n      isAmountExceeding || !isMinAmountReached || !amount;\n    const feeInfo = `Fee: ${sign}${fee}`;\n    const exceedInfo = 'exceeds balance';\n    const minInfo = `minimum amount is ${sign}${MIMIMUM_AMOUNT.toFixed(2)}`;\n    const toInfo = isFeeInvolved ? feeInfo : '';\n    const fromInfo = !isMinAmountReached\n      ? minInfo\n      : isAmountExceeding\n      ? exceedInfo\n      : '';\n\n    return { isAllowedToExchange, fromInfo, toInfo };\n  };\n\n  const exchange = (\n    balances,\n    fromCurrency,\n    toCurrency,\n    fromAmount,\n    toAmount,\n  ) => {\n    const newBalances = balances.map((item) => {\n      if (item.code === fromCurrency) {\n        const newBalance = parseFloat(item.balance) - parseFloat(fromAmount);\n        return { ...item, balance: newBalance.toFixed(2) };\n      } else if (item.code === toCurrency) {\n        const newBalance = parseFloat(item.balance) + parseFloat(toAmount);\n        return { ...item, balance: newBalance.toFixed(2) };\n      } else {\n        return item;\n      }\n    });\n\n    return newBalances;\n  };\n\n  return {\n    convertFromTo,\n    convertToFrom,\n    calculate,\n    exchange,\n    fetch,\n  };\n};\n\nexport default useBalances;\n"]},"metadata":{},"sourceType":"module"}