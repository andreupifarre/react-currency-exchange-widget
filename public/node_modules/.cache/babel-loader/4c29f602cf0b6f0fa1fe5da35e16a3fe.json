{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval'; // import useFetchRates from '../../hooks/useFetchRates';\n\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst DEFAULT_FROM_CURRENCY = 'GBP';\nconst DEFAULT_TO_CURRENCY = 'EUR';\nconst EXCHANGE_FEE = 0.005;\nconst ALLOWANCE_LIMIT = 1000;\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(DEFAULT_FROM_CURRENCY);\n  const [toCurrency, setToCurrency] = useState(DEFAULT_TO_CURRENCY);\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]);\n  const [fromAmount, setFromAmount] = useState('0');\n  const [toAmount, setToAmount] = useState('0');\n  const [isExceeding, setIsExceeding] = useState(false);\n  const [fromInfo, setFromInfo] = useState('');\n  const [toInfo, setToInfo] = useState('');\n  const [currencies, setCurrencies] = useState([{\n    code: 'GBP',\n    balance: '10',\n    sign: '£'\n  }, {\n    code: 'EUR',\n    balance: '0',\n    sign: '€'\n  }, {\n    code: 'USD',\n    balance: '0',\n    sign: '$'\n  }]);\n  const selectedFromCurrency = currencies.find(i => i.code === fromCurrency);\n  const selectedToCurrency = currencies.find(i => i.code === toCurrency);\n\n  const convertFromTo = (cur, amo) => parseFloat((amo * rates[cur]).toFixed(2));\n\n  const convertToFrom = (c, a) => parseFloat((a / rates[c]).toFixed(2));\n\n  const formatRate = () => rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n\n  const handleSwap = () => {//   setFromCurrency(toCurrency);\n    //   setToCurrency(fromCurrency);\n    //   setFromAmount(toAmount);\n    //   setToAmount(fromAmount);\n    //   // setFromRate(toRate);\n    //   // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = currency => {\n    setFromCurrency(currency);\n  };\n\n  const handleToCurrencyChange = currency => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount));\n  };\n\n  const handleFromAmountChange = amount => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n    const floatAmount = parseFloat(amount);\n    const fee = floatAmount * EXCHANGE_FEE;\n    const isExceeding = floatAmount > selectedFromCurrency.balance;\n    const isFeeInvolved = floatAmount > ALLOWANCE_LIMIT;\n    const feeInfo = `Fee: ${selectedFromCurrency.sign}${fee.toFixed(2)}`;\n    setIsExceeding(isExceeding || !floatAmount);\n    setFromInfo(isExceeding ? 'exceeds balance' : '');\n    setToInfo(isFeeInvolved ? feeInfo : '');\n  };\n\n  const handleToAmountChange = amount => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  const handleExchange = () => {\n    const newCurrencies = currencies.map(item => {\n      if (item.code === fromCurrency) {\n        const newBalance = parseFloat(item.balance) - parseFloat(fromAmount);\n        return { ...item,\n          balance: newBalance.toFixed(2)\n        };\n      } else if (item.code === toCurrency) {\n        const newBalance = parseFloat(item.balance) + parseFloat(toAmount);\n        return { ...item,\n          balance: newBalance.toFixed(2)\n        };\n      } else {\n        return item;\n      }\n    });\n    setCurrencies(newCurrencies);\n    setFromAmount();\n    setToAmount();\n    setIsExceeding(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n\n    fetchData();\n  }, [fromCurrency, interval]);\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount)); // eslint-disable-next-line\n  }, [rates]);\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    info: fromInfo,\n    currencies: currencies,\n    onAmountChange: handleFromAmountChange,\n    onCurrencyChange: handleFromCurrencyChange,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    onClick: handleSwap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, selectedFromCurrency.sign, 1, \" = \", selectedToCurrency.sign, rates && formatRate()), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    info: toInfo,\n    currencies: currencies,\n    onAmountChange: handleToAmountChange,\n    onCurrencyChange: handleToCurrencyChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: classNames('exchanger__submit-button', {\n      'exchanger__submit-button--enabled': !isExceeding\n    }),\n    disabled: isExceeding,\n    type: \"button\",\n    onClick: handleExchange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","classNames","useInterval","ExchangerRow","DEFAULT_FROM_CURRENCY","DEFAULT_TO_CURRENCY","EXCHANGE_FEE","ALLOWANCE_LIMIT","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","interval","rates","setRates","fromAmount","setFromAmount","toAmount","setToAmount","isExceeding","setIsExceeding","fromInfo","setFromInfo","toInfo","setToInfo","currencies","setCurrencies","code","balance","sign","selectedFromCurrency","find","i","selectedToCurrency","convertFromTo","cur","amo","parseFloat","toFixed","convertToFrom","c","a","formatRate","handleSwap","handleFromCurrencyChange","currency","handleToCurrencyChange","handleFromAmountChange","amount","floatAmount","fee","isFeeInvolved","feeInfo","handleToAmountChange","handleExchange","newCurrencies","map","item","newBalance","fetchData","url","response","fetch","data","json","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval';\n// import useFetchRates from '../../hooks/useFetchRates';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst DEFAULT_FROM_CURRENCY = 'GBP';\nconst DEFAULT_TO_CURRENCY = 'EUR';\nconst EXCHANGE_FEE = 0.005;\nconst ALLOWANCE_LIMIT = 1000;\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(DEFAULT_FROM_CURRENCY);\n  const [toCurrency, setToCurrency] = useState(DEFAULT_TO_CURRENCY);\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]);\n  const [fromAmount, setFromAmount] = useState('0');\n  const [toAmount, setToAmount] = useState('0');\n  const [isExceeding, setIsExceeding] = useState(false);\n  const [fromInfo, setFromInfo] = useState('');\n  const [toInfo, setToInfo] = useState('');\n\n  const [currencies, setCurrencies] = useState([\n    { code: 'GBP', balance: '10', sign: '£' },\n    { code: 'EUR', balance: '0', sign: '€' },\n    { code: 'USD', balance: '0', sign: '$' },\n  ]);\n\n  const selectedFromCurrency = currencies.find((i) => i.code === fromCurrency);\n  const selectedToCurrency = currencies.find((i) => i.code === toCurrency);\n\n  const convertFromTo = (cur, amo) => parseFloat((amo * rates[cur]).toFixed(2));\n  const convertToFrom = (c, a) => parseFloat((a / rates[c]).toFixed(2));\n\n  const formatRate = () =>\n    rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n\n  const handleSwap = () => {\n    //   setFromCurrency(toCurrency);\n    //   setToCurrency(fromCurrency);\n    //   setFromAmount(toAmount);\n    //   setToAmount(fromAmount);\n    //   // setFromRate(toRate);\n    //   // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = (currency) => {\n    setFromCurrency(currency);\n  };\n\n  const handleToCurrencyChange = (currency) => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount));\n  };\n\n  const handleFromAmountChange = (amount) => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n\n    const floatAmount = parseFloat(amount);\n    const fee = floatAmount * EXCHANGE_FEE;\n    const isExceeding = floatAmount > selectedFromCurrency.balance;\n    const isFeeInvolved = floatAmount > ALLOWANCE_LIMIT;\n    const feeInfo = `Fee: ${selectedFromCurrency.sign}${fee.toFixed(2)}`;\n\n    setIsExceeding(isExceeding || !floatAmount);\n    setFromInfo(isExceeding ? 'exceeds balance' : '');\n    setToInfo(isFeeInvolved ? feeInfo : '');\n  };\n\n  const handleToAmountChange = (amount) => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  const handleExchange = () => {\n    const newCurrencies = currencies.map((item) => {\n      if (item.code === fromCurrency) {\n        const newBalance = parseFloat(item.balance) - parseFloat(fromAmount);\n        return { ...item, balance: newBalance.toFixed(2) };\n      } else if (item.code === toCurrency) {\n        const newBalance = parseFloat(item.balance) + parseFloat(toAmount);\n        return { ...item, balance: newBalance.toFixed(2) };\n      } else {\n        return item;\n      }\n    });\n\n    setCurrencies(newCurrencies);\n    setFromAmount();\n    setToAmount();\n    setIsExceeding(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n    fetchData();\n  }, [fromCurrency, interval]);\n\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount));\n    // eslint-disable-next-line\n  }, [rates]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          info={fromInfo}\n          currencies={currencies}\n          onAmountChange={handleFromAmountChange}\n          onCurrencyChange={handleFromCurrencyChange}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button\n            className=\"exchanger__button exchanger__button--swap\"\n            onClick={handleSwap}\n          />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {1} = {selectedToCurrency.sign}\n            {rates && formatRate()}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          info={toInfo}\n          currencies={currencies}\n          onAmountChange={handleToAmountChange}\n          onCurrencyChange={handleToCurrencyChange}\n        />\n      </div>\n      <button\n        className={classNames('exchanger__submit-button', {\n          'exchanger__submit-button--enabled': !isExceeding,\n        })}\n        disabled={isExceeding}\n        type=\"button\"\n        onClick={handleExchange}\n      >\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}