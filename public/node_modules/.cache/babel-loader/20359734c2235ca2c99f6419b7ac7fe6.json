{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval'; // import useFetchRates from '../../hooks/useFetchRates';\n\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency); // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]); // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [isReady, setIsReady] = useState(false); // const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(item => item.code === fromCurrency);\n  const selectedToCurrency = currencies.find(item => item.code === toCurrency);\n\n  const convertFromTo = (currency, amount) => parseFloat((amount * rates[currency]).toFixed(2));\n\n  const convertToFrom = (currency, amount) => parseFloat((amount / rates[currency]).toFixed(2));\n\n  const formatRate = () => {\n    return rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n  };\n\n  const handleSwap = () => {// setFromCurrency(toCurrency);\n    // setToCurrency(fromCurrency);\n    // setFromAmount(toAmount);\n    // setToAmount(fromAmount);\n    // // setFromRate(toRate);\n    // // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = currency => {\n    setFromCurrency(currency); // setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleToCurrencyChange = currency => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount)); // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleFromAmountChange = amount => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n    const floatAmount = parseFloat(amount);\n    setIsReady(floatAmount > 0 && floatAmount <= selectedFromCurrency.balance);\n  };\n\n  const handleToAmountChange = amount => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  const handleExchange = () => {\n    currencies[0].balance = 999;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n\n    fetchData();\n  }, [fromCurrency, interval]);\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount)); // eslint-disable-next-line\n  }, [rates]);\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    currencies: currencies,\n    onAmountChange: handleFromAmountChange,\n    onCurrencyChange: handleFromCurrencyChange,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    onClick: handleSwap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, selectedFromCurrency.sign, 1, \" = \", selectedToCurrency.sign, rates && formatRate()), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    currencies: currencies,\n    onAmountChange: handleToAmountChange,\n    onCurrencyChange: handleToCurrencyChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: classNames('exchanger__submit-button', {\n      'exchanger__submit-button--enabled': isReady\n    }),\n    disabled: !isReady,\n    type: \"button\",\n    onClick: handleExchange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","classNames","useInterval","ExchangerRow","defaultFromCurrency","defaultToCurrency","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","interval","rates","setRates","fromAmount","setFromAmount","toAmount","setToAmount","isReady","setIsReady","selectedFromCurrency","currencies","find","item","code","selectedToCurrency","convertFromTo","currency","amount","parseFloat","toFixed","convertToFrom","formatRate","handleSwap","handleFromCurrencyChange","handleToCurrencyChange","handleFromAmountChange","floatAmount","balance","handleToAmountChange","handleExchange","fetchData","url","response","fetch","data","json","sign","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval';\n// import useFetchRates from '../../hooks/useFetchRates';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]);\n  // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  // const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(\n    (item) => item.code === fromCurrency,\n  );\n\n  const selectedToCurrency = currencies.find(\n    (item) => item.code === toCurrency,\n  );\n\n  const convertFromTo = (currency, amount) =>\n    parseFloat((amount * rates[currency]).toFixed(2));\n\n  const convertToFrom = (currency, amount) =>\n    parseFloat((amount / rates[currency]).toFixed(2));\n\n  const formatRate = () => {\n    return rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n  };\n\n  const handleSwap = () => {\n    // setFromCurrency(toCurrency);\n    // setToCurrency(fromCurrency);\n    // setFromAmount(toAmount);\n    // setToAmount(fromAmount);\n    // // setFromRate(toRate);\n    // // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = (currency) => {\n    setFromCurrency(currency);\n    // setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleToCurrencyChange = (currency) => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleFromAmountChange = (amount) => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n\n    const floatAmount = parseFloat(amount);\n    setIsReady(floatAmount > 0 && floatAmount <= selectedFromCurrency.balance);\n  };\n\n  const handleToAmountChange = (amount) => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  const handleExchange = () => {\n    currencies[0].balance = 999;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n    fetchData();\n  }, [fromCurrency, interval]);\n\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount));\n    // eslint-disable-next-line\n  }, [rates]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          currencies={currencies}\n          onAmountChange={handleFromAmountChange}\n          onCurrencyChange={handleFromCurrencyChange}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button\n            className=\"exchanger__button exchanger__button--swap\"\n            onClick={handleSwap}\n          />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {1} = {selectedToCurrency.sign}\n            {rates && formatRate()}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          currencies={currencies}\n          onAmountChange={handleToAmountChange}\n          onCurrencyChange={handleToCurrencyChange}\n        />\n      </div>\n      <button\n        className={classNames('exchanger__submit-button', {\n          'exchanger__submit-button--enabled': isReady,\n        })}\n        disabled={!isReady}\n        type=\"button\"\n        onClick={handleExchange}\n      >\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}