{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval'; // import useFetchRates from '../../hooks/useFetchRates';\n\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [{\n  code: 'GBP',\n  balance: '10',\n  sign: '£'\n}, {\n  code: 'EUR',\n  balance: '0',\n  sign: '€'\n}, {\n  code: 'USD',\n  balance: '0',\n  sign: '$'\n}];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency); // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]); // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [isReady, setIsReady] = useState(false); // const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(item => item.code === fromCurrency);\n  const selectedToCurrency = currencies.find(item => item.code === toCurrency);\n\n  const convertFromTo = (currency, amount) => parseFloat((amount * rates[currency]).toFixed(2));\n\n  const convertToFrom = (currency, amount) => parseFloat((amount / rates[currency]).toFixed(2));\n\n  const formatRate = () => {\n    return rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n  };\n\n  const handleSwap = () => {// setFromCurrency(toCurrency);\n    // setToCurrency(fromCurrency);\n    // setFromAmount(toAmount);\n    // setToAmount(fromAmount);\n    // // setFromRate(toRate);\n    // // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = currency => {\n    setFromCurrency(currency); // setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleToCurrencyChange = currency => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount)); // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleFromAmountChange = amount => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n    const floatAmount = parseFloat(amount);\n    setIsReady(floatAmount > 0 && floatAmount <= selectedFromCurrency.balance);\n  };\n\n  const handleToAmountChange = amount => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n\n    fetchData();\n  }, [fromCurrency, interval]);\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount)); // eslint-disable-next-line\n  }, [rates]);\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    currencies: currencies,\n    onAmountChange: handleFromAmountChange,\n    onCurrencyChange: handleFromCurrencyChange,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    onClick: handleSwap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, selectedFromCurrency.sign, 1, \" = \", selectedToCurrency.sign, rates && formatRate()), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    currencies: currencies,\n    onAmountChange: handleToAmountChange,\n    onCurrencyChange: handleToCurrencyChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: classNames('exchanger__submit-button', {\n      'exchanger__submit-button--enabled': isReady\n    }),\n    disabled: !isReady,\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","classNames","useInterval","ExchangerRow","defaultFromCurrency","defaultToCurrency","currencies","code","balance","sign","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","interval","rates","setRates","fromAmount","setFromAmount","toAmount","setToAmount","isReady","setIsReady","selectedFromCurrency","find","item","selectedToCurrency","convertFromTo","currency","amount","parseFloat","toFixed","convertToFrom","formatRate","handleSwap","handleFromCurrencyChange","handleToCurrencyChange","handleFromAmountChange","floatAmount","handleToAmountChange","fetchData","url","response","fetch","data","json","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useInterval from '../../hooks/useInterval';\n// import useFetchRates from '../../hooks/useFetchRates';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [\n  { code: 'GBP', balance: '10', sign: '£' },\n  { code: 'EUR', balance: '0', sign: '€' },\n  { code: 'USD', balance: '0', sign: '$' },\n];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n  const interval = useInterval(10000);\n  const [rates, setRates] = useState([]);\n  // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [isReady, setIsReady] = useState(false);\n  // const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(\n    (item) => item.code === fromCurrency,\n  );\n\n  const selectedToCurrency = currencies.find(\n    (item) => item.code === toCurrency,\n  );\n\n  const convertFromTo = (currency, amount) =>\n    parseFloat((amount * rates[currency]).toFixed(2));\n\n  const convertToFrom = (currency, amount) =>\n    parseFloat((amount / rates[currency]).toFixed(2));\n\n  const formatRate = () => {\n    return rates[toCurrency] ? parseFloat(rates[toCurrency].toFixed(4)) : null;\n  };\n\n  const handleSwap = () => {\n    // setFromCurrency(toCurrency);\n    // setToCurrency(fromCurrency);\n    // setFromAmount(toAmount);\n    // setToAmount(fromAmount);\n    // // setFromRate(toRate);\n    // // setToRate(fromRate);\n  };\n\n  const handleFromCurrencyChange = (currency) => {\n    setFromCurrency(currency);\n    // setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleToCurrencyChange = (currency) => {\n    setToCurrency(currency);\n    setToAmount(convertFromTo(currency, fromAmount));\n    // setFromAmount(convertToFrom(toAmount));\n  };\n\n  const handleFromAmountChange = (amount) => {\n    setFromAmount(amount);\n    setToAmount(convertFromTo(toCurrency, amount));\n\n    const floatAmount = parseFloat(amount);\n    setIsReady(floatAmount > 0 && floatAmount <= selectedFromCurrency.balance);\n  };\n\n  const handleToAmountChange = (amount) => {\n    setToAmount(amount);\n    setFromAmount(convertToFrom(toCurrency, amount));\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n    fetchData();\n  }, [fromCurrency, interval]);\n\n  useEffect(() => {\n    setToAmount(convertFromTo(toCurrency, fromAmount));\n    // eslint-disable-next-line\n  }, [rates]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          currencies={currencies}\n          onAmountChange={handleFromAmountChange}\n          onCurrencyChange={handleFromCurrencyChange}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button\n            className=\"exchanger__button exchanger__button--swap\"\n            onClick={handleSwap}\n          />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {1} = {selectedToCurrency.sign}\n            {rates && formatRate()}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          currencies={currencies}\n          onAmountChange={handleToAmountChange}\n          onCurrencyChange={handleToCurrencyChange}\n        />\n      </div>\n      <button\n        className={classNames('exchanger__submit-button', {\n          'exchanger__submit-button--enabled': isReady,\n        })}\n        disabled={!isReady}\n        type=\"button\"\n      >\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}