{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect, useCallback } from 'react'; // import useInterval from '../../hooks/useInterval';\n\nimport useFetchRates from '../../hooks/useFetchRates';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [{\n  code: 'GBP',\n  balance: '10',\n  sign: '£'\n}, {\n  code: 'EUR',\n  balance: '0',\n  sign: '€'\n}, {\n  code: 'USD',\n  balance: '0',\n  sign: '$'\n}];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency); // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n\n  const [rates, setRates] = useState([]); // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency); // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(item => item.code === fromCurrency);\n  const selectedToCurrency = currencies.find(item => item.code === toCurrency);\n  const convertFromTo = useCallback(rate => parseFloat((fromAmount * rate).toFixed(2)), [fromAmount]);\n  const convertToFrom = useCallback(rate => parseFloat((toAmount / rate).toFixed(2)), [toAmount]);\n\n  const handleSwap = () => {\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n    setFromAmount(toAmount);\n    setToAmount(fromAmount); // setFromRate(toRate);\n    // setToRate(fromRate);\n  }; // useEffect(() => {\n  //   if (activeCurrency === selectedFromCurrency.code) {\n  //     setToRate(rate);\n  //     setToAmount(convertFromTo(rate));\n  //   } else if (activeCurrency === selectedToCurrency.code) {\n  //     setFromRate(rate);\n  //     setFromAmount(convertToFrom(rate));\n  //   }\n  // }, [\n  //   rate,\n  //   activeCurrency,\n  //   selectedFromCurrency.code,\n  //   selectedToCurrency.code,\n  //   convertFromTo,\n  //   convertToFrom,\n  // ]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo(rate));\n  // }, [\n  //   fromAmount,\n  //   activeCurrency,\n  //   selectedFromCurrency.code,\n  //   convertFromTo,\n  //   rate,\n  // ]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom(rate));\n  // }, [\n  //   toAmount,\n  //   activeCurrency,\n  //   convertToFrom,\n  //   selectedToCurrency.code,\n  //   setFromAmount,\n  //   rate,\n  // ]);\n  // useEffect(() => {\n  //   setToRate(rate);\n  //   setToAmount(7);\n  // }, [rate]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   // setFromAmount(convertToFrom());\n  //   setToRate(rate);\n  // }, [rate]);\n  // useEffect(() => {\n  //   // console.log(1 / rate);\n  //   // console.log(rate / 1);\n  //   console.log(rate);\n  // }, [rate]);\n  // useEffect(() => {\n  //   console.log('From Rate:' + fromRate);\n  //   // if (activeCurrency !== selectedFromCurrency.code) return;\n  //   const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //   setToAmount(exchange);\n  // }, [fromRate]);\n  // useEffect(() => {\n  //   console.log('To Rate:' + toRate);\n  //   // if (activeCurrency !== selectedToCurrency.code) return;\n  //   const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //   setFromAmount(exchange);\n  // }, [toRate]);\n\n\n  const handleFromCurrencyChange = currency => {\n    console.log('From:' + currency);\n    setFromCurrency(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleToCurrencyChange = currency => {\n    console.log('To:' + currency);\n    setToCurrency(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleFromAmountChange = currency => {\n    console.log('From:' + currency);\n    setFromAmount(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleToAmountChange = currency => {\n    console.log('To:' + currency);\n    setToAmount(currency);\n    setActiveCurrency(currency);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n\n    setTimeout(() => {\n      fetchData();\n    }, 5000);\n  }, []); // useEffect(() => {\n  // setRates(ratesFetched);\n  // }, [ratesFetched]);\n\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    currencies: currencies,\n    onAmountChange: handleFromAmountChange,\n    onCurrencyChange: handleFromCurrencyChange,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    onClick: handleSwap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, selectedFromCurrency.sign, 1, \" = \", selectedToCurrency.sign, rates && rates[toCurrency]), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    currencies: currencies,\n    onAmountChange: handleToAmountChange,\n    onCurrencyChange: handleToCurrencyChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"exchanger__submit-button\",\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","useCallback","useFetchRates","ExchangerRow","defaultFromCurrency","defaultToCurrency","currencies","code","balance","sign","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","rates","setRates","fromAmount","setFromAmount","toAmount","setToAmount","activeCurrency","setActiveCurrency","selectedFromCurrency","find","item","selectedToCurrency","convertFromTo","rate","parseFloat","toFixed","convertToFrom","handleSwap","handleFromCurrencyChange","currency","console","log","handleToCurrencyChange","handleFromAmountChange","handleToAmountChange","fetchData","url","response","fetch","data","json","setTimeout","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n// import useInterval from '../../hooks/useInterval';\nimport useFetchRates from '../../hooks/useFetchRates';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [\n  { code: 'GBP', balance: '10', sign: '£' },\n  { code: 'EUR', balance: '0', sign: '€' },\n  { code: 'USD', balance: '0', sign: '$' },\n];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  // const rate = useFetchRates(fromCurrency, toCurrency, useInterval(10000));\n  // const ratesFetched = useFetchRates(0);\n  const [rates, setRates] = useState([]);\n  // const rate = useFetchRates(fromCurrency, toCurrency);\n  // console.log(fromCurrency, toCurrency, rate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(\n    (item) => item.code === fromCurrency,\n  );\n\n  const selectedToCurrency = currencies.find(\n    (item) => item.code === toCurrency,\n  );\n\n  const convertFromTo = useCallback(\n    (rate) => parseFloat((fromAmount * rate).toFixed(2)),\n    [fromAmount],\n  );\n\n  const convertToFrom = useCallback(\n    (rate) => parseFloat((toAmount / rate).toFixed(2)),\n    [toAmount],\n  );\n\n  const handleSwap = () => {\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n    setFromAmount(toAmount);\n    setToAmount(fromAmount);\n    // setFromRate(toRate);\n    // setToRate(fromRate);\n  };\n\n  // useEffect(() => {\n  //   if (activeCurrency === selectedFromCurrency.code) {\n  //     setToRate(rate);\n  //     setToAmount(convertFromTo(rate));\n  //   } else if (activeCurrency === selectedToCurrency.code) {\n  //     setFromRate(rate);\n  //     setFromAmount(convertToFrom(rate));\n  //   }\n  // }, [\n  //   rate,\n  //   activeCurrency,\n  //   selectedFromCurrency.code,\n  //   selectedToCurrency.code,\n  //   convertFromTo,\n  //   convertToFrom,\n  // ]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo(rate));\n  // }, [\n  //   fromAmount,\n  //   activeCurrency,\n  //   selectedFromCurrency.code,\n  //   convertFromTo,\n  //   rate,\n  // ]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom(rate));\n  // }, [\n  //   toAmount,\n  //   activeCurrency,\n  //   convertToFrom,\n  //   selectedToCurrency.code,\n  //   setFromAmount,\n  //   rate,\n  // ]);\n\n  // useEffect(() => {\n  //   setToRate(rate);\n  //   setToAmount(7);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedFromCurrency.code) return;\n  //   setToAmount(convertFromTo());\n  // }, [fromAmount]);\n\n  // useEffect(() => {\n  //   if (activeCurrency !== selectedToCurrency.code) return;\n  //   setFromAmount(convertToFrom());\n  // }, [toAmount]);\n\n  // useEffect(() => {\n  //   // setFromAmount(convertToFrom());\n  //   setActiveCurrency(fromCurrency);\n  // }, [fromCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   setActiveCurrency(toCurrency);\n  // }, [toCurrency]);\n\n  // useEffect(() => {\n  //   // setToAmount(convertFromTo());\n  //   // setFromAmount(convertToFrom());\n  //   setToRate(rate);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   // console.log(1 / rate);\n  //   // console.log(rate / 1);\n  //   console.log(rate);\n  // }, [rate]);\n\n  // useEffect(() => {\n  //   console.log('From Rate:' + fromRate);\n  //   // if (activeCurrency !== selectedFromCurrency.code) return;\n  //   const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //   setToAmount(exchange);\n  // }, [fromRate]);\n\n  // useEffect(() => {\n  //   console.log('To Rate:' + toRate);\n  //   // if (activeCurrency !== selectedToCurrency.code) return;\n  //   const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //   setFromAmount(exchange);\n  // }, [toRate]);\n\n  const handleFromCurrencyChange = (currency) => {\n    console.log('From:' + currency);\n    setFromCurrency(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleToCurrencyChange = (currency) => {\n    console.log('To:' + currency);\n    setToCurrency(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleFromAmountChange = (currency) => {\n    console.log('From:' + currency);\n    setFromAmount(currency);\n    setActiveCurrency(currency);\n  };\n\n  const handleToAmountChange = (currency) => {\n    console.log('To:' + currency);\n    setToAmount(currency);\n    setActiveCurrency(currency);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = `https://openexchangerates.org/api/latest.json?app_id=81fa12e332b74f45a1de4a276db7c0d1&base=${fromCurrency}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setRates(data.rates);\n    };\n\n    setTimeout(() => {\n      fetchData();\n    }, 5000);\n  }, []);\n\n  // useEffect(() => {\n  // setRates(ratesFetched);\n  // }, [ratesFetched]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          currencies={currencies}\n          onAmountChange={handleFromAmountChange}\n          onCurrencyChange={handleFromCurrencyChange}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button\n            className=\"exchanger__button exchanger__button--swap\"\n            onClick={handleSwap}\n          />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {1} = {selectedToCurrency.sign}\n            {rates && rates[toCurrency]}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          currencies={currencies}\n          onAmountChange={handleToAmountChange}\n          onCurrencyChange={handleToCurrencyChange}\n        />\n      </div>\n      <button className=\"exchanger__submit-button\" type=\"button\">\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}