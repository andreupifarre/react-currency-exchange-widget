{"ast":null,"code":"var _jsxFileName = \"/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js\";\nimport React, { useState, useEffect } from 'react'; // import useDebounce from '../../hooks/useDebounce';\n\nimport useFetchData from '../../hooks/useFetchData';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [{\n  code: 'GBP',\n  balance: '10',\n  sign: '£'\n}, {\n  code: 'EUR',\n  balance: '0',\n  sign: '€'\n}, {\n  code: 'USD',\n  balance: '0',\n  sign: '$'\n}];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  const [fromRate, toRate] = useFetchData(fromCurrency, toCurrency);\n  console.log(fromRate, toRate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency); // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(item => item.code === fromCurrency);\n  const selectedToCurrency = currencies.find(item => item.code === toCurrency); // const convert = () => {\n  //   console.log(\n  //     activeCurrency,\n  //     selectedFromCurrency.code,\n  //     selectedToCurrency.code,\n  //   );\n  //   if (activeCurrency === selectedFromCurrency.code) {\n  //     const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //     setToAmount(exchange);\n  //   }\n  //   if (activeCurrency === selectedToCurrency.code) {\n  //     const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //     setFromAmount(exchange);\n  //   }\n  // };\n\n  useEffect(() => {\n    if (activeCurrency !== selectedFromCurrency.code) return;\n    const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n    setToAmount(exchange); // convert();\n  }, [fromAmount]);\n  useEffect(() => {\n    if (activeCurrency !== selectedToCurrency.code) return;\n    const exchange = parseFloat((toAmount / toRate).toFixed(2));\n    setFromAmount(exchange); // convert();\n  }, [toAmount]); // useEffect(() => {\n  //   console.log(fromCurrency);\n  //   console.log(rate);\n  // }, [fromCurrency]);\n  // useEffect(() => {\n  //   console.log(toCurrency);\n  //   console.log(rate);\n  // }, [toCurrency]);\n  // useEffect(() => {\n  // console.log(toCurrency);\n  // console.log(rate);\n  // convert();\n  // }, [rate]);\n\n  return React.createElement(\"div\", {\n    className: \"exchanger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedFromCurrency.balance,\n    currency: selectedFromCurrency.code,\n    sign: selectedFromCurrency.sign,\n    amount: fromAmount,\n    currencies: currencies,\n    setCurrency: setFromCurrency,\n    setAmount: setFromAmount,\n    setActiveCurrency: setActiveCurrency,\n    alt: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"exchanger__actions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"exchanger__actions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--swap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"exchanger__button exchanger__button--rates\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, selectedFromCurrency.sign, fromRate, \" = \", selectedToCurrency.sign, toRate), React.createElement(\"div\", {\n    className: \"exchanger__empty-action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"exchanger__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(ExchangerRow, {\n    balance: selectedToCurrency.balance,\n    currency: selectedToCurrency.code,\n    sign: selectedToCurrency.sign,\n    amount: toAmount,\n    currencies: currencies,\n    setCurrency: setToCurrency,\n    setAmount: setToAmount,\n    setActiveCurrency: setActiveCurrency,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"exchanger__submit-button\",\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Exchange\"));\n};\n\nExchanger.whyDidYouRender = {// logOnDifferentValues: true,\n};\nexport default Exchanger;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/components/Exchanger/Exchanger.js"],"names":["React","useState","useEffect","useFetchData","ExchangerRow","defaultFromCurrency","defaultToCurrency","currencies","code","balance","sign","Exchanger","fromCurrency","setFromCurrency","toCurrency","setToCurrency","fromRate","toRate","console","log","fromAmount","setFromAmount","toAmount","setToAmount","activeCurrency","setActiveCurrency","selectedFromCurrency","find","item","selectedToCurrency","exchange","parseFloat","toFixed","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import useDebounce from '../../hooks/useDebounce';\nimport useFetchData from '../../hooks/useFetchData';\nimport ExchangerRow from '../ExchangerRow/ExchangerRow';\nimport './Exchanger.scss';\n\nconst defaultFromCurrency = 'GBP';\nconst defaultToCurrency = 'EUR';\nconst currencies = [\n  { code: 'GBP', balance: '10', sign: '£' },\n  { code: 'EUR', balance: '0', sign: '€' },\n  { code: 'USD', balance: '0', sign: '$' },\n];\n\nconst Exchanger = () => {\n  const [fromCurrency, setFromCurrency] = useState(defaultFromCurrency);\n  const [toCurrency, setToCurrency] = useState(defaultToCurrency);\n  const [fromRate, toRate] = useFetchData(fromCurrency, toCurrency);\n  console.log(fromRate, toRate);\n  const [fromAmount, setFromAmount] = useState(0);\n  const [toAmount, setToAmount] = useState(0);\n  const [activeCurrency, setActiveCurrency] = useState(defaultFromCurrency);\n  // const [fromRate, setFromRate] = useState(1);\n  // const [toRate, setToRate] = useState(rate);\n\n  const selectedFromCurrency = currencies.find(\n    (item) => item.code === fromCurrency,\n  );\n\n  const selectedToCurrency = currencies.find(\n    (item) => item.code === toCurrency,\n  );\n\n  // const convert = () => {\n  //   console.log(\n  //     activeCurrency,\n  //     selectedFromCurrency.code,\n  //     selectedToCurrency.code,\n  //   );\n  //   if (activeCurrency === selectedFromCurrency.code) {\n  //     const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n  //     setToAmount(exchange);\n  //   }\n  //   if (activeCurrency === selectedToCurrency.code) {\n  //     const exchange = parseFloat((toAmount / toRate).toFixed(2));\n  //     setFromAmount(exchange);\n  //   }\n  // };\n\n  useEffect(() => {\n    if (activeCurrency !== selectedFromCurrency.code) return;\n    const exchange = parseFloat((fromAmount * toRate).toFixed(2));\n    setToAmount(exchange);\n    // convert();\n  }, [fromAmount]);\n\n  useEffect(() => {\n    if (activeCurrency !== selectedToCurrency.code) return;\n    const exchange = parseFloat((toAmount / toRate).toFixed(2));\n    setFromAmount(exchange);\n    // convert();\n  }, [toAmount]);\n\n  // useEffect(() => {\n  //   console.log(fromCurrency);\n  //   console.log(rate);\n  // }, [fromCurrency]);\n\n  // useEffect(() => {\n  //   console.log(toCurrency);\n  //   console.log(rate);\n  // }, [toCurrency]);\n\n  // useEffect(() => {\n  // console.log(toCurrency);\n  // console.log(rate);\n  // convert();\n  // }, [rate]);\n\n  return (\n    <div className=\"exchanger\">\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedFromCurrency.balance}\n          currency={selectedFromCurrency.code}\n          sign={selectedFromCurrency.sign}\n          amount={fromAmount}\n          currencies={currencies}\n          setCurrency={setFromCurrency}\n          setAmount={setFromAmount}\n          setActiveCurrency={setActiveCurrency}\n          alt\n        />\n      </div>\n      <div className=\"exchanger__actions\">\n        <div className=\"exchanger__actions-container\">\n          <button className=\"exchanger__button exchanger__button--swap\" />\n          <button className=\"exchanger__button exchanger__button--rates\">\n            {selectedFromCurrency.sign}\n            {fromRate} = {selectedToCurrency.sign}\n            {toRate}\n          </button>\n          <div className=\"exchanger__empty-action\" />\n        </div>\n      </div>\n      <div className=\"exchanger__row\">\n        <ExchangerRow\n          balance={selectedToCurrency.balance}\n          currency={selectedToCurrency.code}\n          sign={selectedToCurrency.sign}\n          amount={toAmount}\n          currencies={currencies}\n          setCurrency={setToCurrency}\n          setAmount={setToAmount}\n          setActiveCurrency={setActiveCurrency}\n        />\n      </div>\n      <button className=\"exchanger__submit-button\" type=\"button\">\n        Exchange\n      </button>\n    </div>\n  );\n};\n\nExchanger.whyDidYouRender = {\n  // logOnDifferentValues: true,\n};\n\nexport default Exchanger;\n"]},"metadata":{},"sourceType":"module"}