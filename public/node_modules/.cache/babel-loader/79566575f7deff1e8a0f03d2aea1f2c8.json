{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useFetchData = term => {\n  const [results, setResults] = useState([]);\n  const [noResults, setNoResults] = useState(true);\n  useEffect(() => {\n    if (term) {\n      const fetchData = async () => {\n        const url = `https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en&solrRows=6&solrTerm=${term}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const isNoFound = data.results.numFound === 0;\n        setNoResults(isNoFound);\n        setResults(isNoFound ? [] : data.results.docs);\n      };\n\n      fetchData();\n    } else {\n      setResults([]);\n      setNoResults(false);\n    }\n  }, [term]);\n  return [results, noResults];\n};\n\nexport default useFetchData;","map":{"version":3,"sources":["/Users/andreu/Documents/Revolut/react-currency-exchange-widget/src/hooks/useFetchData.js"],"names":["useState","useEffect","useFetchData","term","results","setResults","noResults","setNoResults","fetchData","url","response","fetch","data","json","isNoFound","numFound","docs"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,IAAJ,EAAU;AACR,YAAMK,SAAS,GAAG,YAAY;AAC5B,cAAMC,GAAG,GAAI,sFAAqFN,IAAK,EAAvG;AACA,cAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,cAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,cAAMC,SAAS,GAAGF,IAAI,CAACR,OAAL,CAAaW,QAAb,KAA0B,CAA5C;AACAR,QAAAA,YAAY,CAACO,SAAD,CAAZ;AACAT,QAAAA,UAAU,CAACS,SAAS,GAAG,EAAH,GAAQF,IAAI,CAACR,OAAL,CAAaY,IAA/B,CAAV;AACD,OAPD;;AASAR,MAAAA,SAAS;AACV,KAXD,MAWO;AACLH,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAhBQ,EAgBN,CAACJ,IAAD,CAhBM,CAAT;AAkBA,SAAO,CAACC,OAAD,EAAUE,SAAV,CAAP;AACD,CAvBD;;AAyBA,eAAeJ,YAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetchData = term => {\n  const [results, setResults] = useState([]);\n  const [noResults, setNoResults] = useState(true);\n\n  useEffect(() => {\n    if (term) {\n      const fetchData = async () => {\n        const url = `https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en&solrRows=6&solrTerm=${term}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const isNoFound = data.results.numFound === 0;\n        setNoResults(isNoFound);\n        setResults(isNoFound ? [] : data.results.docs);\n      };\n\n      fetchData();\n    } else {\n      setResults([]);\n      setNoResults(false);\n    }\n  }, [term]);\n\n  return [results, noResults];\n};\n\nexport default useFetchData;\n"]},"metadata":{},"sourceType":"module"}